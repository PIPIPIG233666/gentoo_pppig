From 6cdb6234d64808117e67a3bb5c36b05f7d27a767 Mon Sep 17 00:00:00 2001
From: blorange-amd <bo.li2@amd.com>
Date: Thu, 16 Nov 2023 18:37:12 +0000
Subject: [PATCH] [ROCm] Supports ROCm6.0 reorganization and cleanup (#111486)

Pull Request resolved: https://github.com/pytorch/pytorch/pull/111486
Approved by: https://github.com/jithunnair-amd, https://github.com/pruthvistony, https://github.com/malfet
---
 cmake/public/LoadHIP.cmake                 | 213 ++++-----------------
 torch/utils/hipify/cuda_to_hip_mappings.py |  15 +-
 2 files changed, 51 insertions(+), 177 deletions(-)

diff --git a/cmake/public/LoadHIP.cmake b/cmake/public/LoadHIP.cmake
index 906bf30db0b00be..6989f57f7090b73 100644
--- a/cmake/public/LoadHIP.cmake
+++ b/cmake/public/LoadHIP.cmake
@@ -10,129 +10,11 @@ if(NOT DEFINED ENV{ROCM_INCLUDE_DIRS})
 else()
   set(ROCM_INCLUDE_DIRS $ENV{ROCM_INCLUDE_DIRS})
 endif()
-# HIP_PATH
-if(NOT DEFINED ENV{HIP_PATH})
-  set(HIP_PATH ${ROCM_PATH}/hip)
-else()
-  set(HIP_PATH $ENV{HIP_PATH})
-endif()
 
-if(NOT EXISTS ${HIP_PATH})
+if(NOT EXISTS ${ROCM_PATH})
   return()
 endif()
 
-# HSA_PATH
-if(NOT DEFINED ENV{HSA_PATH})
-  set(HSA_PATH ${ROCM_PATH}/hsa)
-else()
-  set(HSA_PATH $ENV{HSA_PATH})
-endif()
-
-# ROCBLAS_PATH
-if(NOT DEFINED ENV{ROCBLAS_PATH})
-  set(ROCBLAS_PATH ${ROCM_PATH}/rocblas)
-else()
-  set(ROCBLAS_PATH $ENV{ROCBLAS_PATH})
-endif()
-
-# HIPBLAS_PATH
-if(NOT DEFINED ENV{HIPBLAS_PATH})
-  set(HIPBLAS_PATH ${ROCM_PATH}/hipblas)
-else()
-  set(HIPBLAS_PATH $ENV{HIPBLAS_PATH})
-endif()
-
-# ROCFFT_PATH
-if(NOT DEFINED ENV{ROCFFT_PATH})
-  set(ROCFFT_PATH ${ROCM_PATH}/rocfft)
-else()
-  set(ROCFFT_PATH $ENV{ROCFFT_PATH})
-endif()
-
-# HIPFFT_PATH
-if(NOT DEFINED ENV{HIPFFT_PATH})
-  set(HIPFFT_PATH ${ROCM_PATH}/hipfft)
-else()
-  set(HIPFFT_PATH $ENV{HIPFFT_PATH})
-endif()
-
-# HIPSPARSE_PATH
-if(NOT DEFINED ENV{HIPSPARSE_PATH})
-  set(HIPSPARSE_PATH ${ROCM_PATH}/hipsparse)
-else()
-  set(HIPSPARSE_PATH $ENV{HIPSPARSE_PATH})
-endif()
-
-# THRUST_PATH
-if(DEFINED ENV{THRUST_PATH})
-  set(THRUST_PATH $ENV{THRUST_PATH})
-else()
-  set(THRUST_PATH ${ROCM_PATH}/include)
-endif()
-
-# HIPRAND_PATH
-if(NOT DEFINED ENV{HIPRAND_PATH})
-  set(HIPRAND_PATH ${ROCM_PATH}/hiprand)
-else()
-  set(HIPRAND_PATH $ENV{HIPRAND_PATH})
-endif()
-
-# ROCRAND_PATH
-if(NOT DEFINED ENV{ROCRAND_PATH})
-  set(ROCRAND_PATH ${ROCM_PATH}/rocrand)
-else()
-  set(ROCRAND_PATH $ENV{ROCRAND_PATH})
-endif()
-
-# MIOPEN_PATH
-if(NOT DEFINED ENV{MIOPEN_PATH})
-  set(MIOPEN_PATH ${ROCM_PATH}/miopen)
-else()
-  set(MIOPEN_PATH $ENV{MIOPEN_PATH})
-endif()
-
-# RCCL_PATH
-if(NOT DEFINED ENV{RCCL_PATH})
-  set(RCCL_PATH ${ROCM_PATH}/rccl)
-else()
-  set(RCCL_PATH $ENV{RCCL_PATH})
-endif()
-
-# ROCPRIM_PATH
-if(NOT DEFINED ENV{ROCPRIM_PATH})
-  set(ROCPRIM_PATH ${ROCM_PATH}/rocprim)
-else()
-  set(ROCPRIM_PATH $ENV{ROCPRIM_PATH})
-endif()
-
-# HIPCUB_PATH
-if(NOT DEFINED ENV{HIPCUB_PATH})
-  set(HIPCUB_PATH ${ROCM_PATH}/hipcub)
-else()
-  set(HIPCUB_PATH $ENV{HIPCUB_PATH})
-endif()
-
-# ROCTHRUST_PATH
-if(NOT DEFINED ENV{ROCTHRUST_PATH})
-  set(ROCTHRUST_PATH ${ROCM_PATH}/rocthrust)
-else()
-  set(ROCTHRUST_PATH $ENV{ROCTHRUST_PATH})
-endif()
-
-# HIPSOLVER_PATH
-if(NOT DEFINED ENV{HIPSOLVER_PATH})
-  set(HIPSOLVER_PATH ${ROCM_PATH}/hipsolver)
-else()
-  set(HIPSOLVER_PATH $ENV{HIPSOLVER_PATH})
-endif()
-
-# ROCTRACER_PATH
-if(NOT DEFINED ENV{ROCTRACER_PATH})
-  set(ROCTRACER_PATH ${ROCM_PATH}/roctracer)
-else()
-  set(ROCTRACER_PATH $ENV{ROCTRACER_PATH})
-endif()
-
 # MAGMA_HOME
 if(NOT DEFINED ENV{MAGMA_HOME})
   set(MAGMA_HOME ${ROCM_PATH}/magma)
@@ -148,7 +30,7 @@ endif()
 message("Building PyTorch for GPU arch: ${PYTORCH_ROCM_ARCH}")
 
 # Add HIP to the CMAKE Module Path
-set(CMAKE_MODULE_PATH ${HIP_PATH}/cmake ${CMAKE_MODULE_PATH})
+set(CMAKE_MODULE_PATH ${ROCM_PATH}/lib/cmake/hip ${CMAKE_MODULE_PATH})
 
 macro(find_package_and_print_version PACKAGE_NAME)
   find_package("${PACKAGE_NAME}" ${ARGN})
@@ -160,15 +42,29 @@ find_package_and_print_version(HIP 1.0)
 
 if(HIP_FOUND)
   set(PYTORCH_FOUND_HIP TRUE)
+  set(FOUND_ROCM_VERSION_H FALSE)
+
+  set(PROJECT_RANDOM_BINARY_DIR "${PROJECT_BINARY_DIR}")
+  set(file "${PROJECT_BINARY_DIR}/detect_rocm_version.cc")
 
   # Find ROCM version for checks
   # ROCM 5.0 and later will have header api for version management
   if(EXISTS ${ROCM_INCLUDE_DIRS}/rocm_version.h)
-
-    set(PROJECT_RANDOM_BINARY_DIR "${PROJECT_BINARY_DIR}")
-    set(file "${PROJECT_BINARY_DIR}/detect_rocm_version.cc")
+    set(FOUND_ROCM_VERSION_H TRUE)
     file(WRITE ${file} ""
       "#include <rocm_version.h>\n"
+      )
+  elseif(EXISTS ${ROCM_INCLUDE_DIRS}/rocm-core/rocm_version.h)
+    set(FOUND_ROCM_VERSION_H TRUE)
+    file(WRITE ${file} ""
+      "#include <rocm-core/rocm_version.h>\n"
+      )
+  else()
+    message("********************* rocm_version.h couldnt be found ******************\n")
+  endif()
+
+  if(FOUND_ROCM_VERSION_H)
+    file(APPEND ${file} ""
       "#include <cstdio>\n"
 
       "#ifndef ROCM_VERSION_PATCH\n"
@@ -194,11 +90,6 @@ if(HIP_FOUND)
     message(STATUS "Caffe2: Header version is: " ${rocm_version_from_header})
     set(ROCM_VERSION_DEV_RAW ${rocm_version_from_header})
     message("\n***** ROCm version from rocm_version.h ****\n")
-
-  # ROCM < 4.5, we don't have the header api file, use flat file
-  else()
-    file(READ "${ROCM_PATH}/.info/version-dev" ROCM_VERSION_DEV_RAW)
-    message("\n***** ROCm version from ${ROCM_PATH}/.info/version-dev ****\n")
   endif()
 
   string(REGEX MATCH "^([0-9]+)\.([0-9]+)\.([0-9]+).*$" ROCM_VERSION_DEV_MATCH ${ROCM_VERSION_DEV_RAW})
@@ -237,44 +128,24 @@ if(HIP_FOUND)
   set(CMAKE_HIP_CLANG_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})
   ### Remove setting of Flags when FindHIP.CMake PR #558 is accepted.###
 
-  # As of ROCm 5.1.x, all *.cmake files are under /opt/rocm/lib/cmake/<package>
-  if(ROCM_VERSION_DEV VERSION_GREATER_EQUAL "5.1.0")
-    set(hip_DIR ${ROCM_PATH}/lib/cmake/hip)
-    set(hsa-runtime64_DIR ${ROCM_PATH}/lib/cmake/hsa-runtime64)
-    set(AMDDeviceLibs_DIR ${ROCM_PATH}/lib/cmake/AMDDeviceLibs)
-    set(amd_comgr_DIR ${ROCM_PATH}/lib/cmake/amd_comgr)
-    set(rocrand_DIR ${ROCM_PATH}/lib/cmake/rocrand)
-    set(hiprand_DIR ${ROCM_PATH}/lib/cmake/hiprand)
-    set(rocblas_DIR ${ROCM_PATH}/lib/cmake/rocblas)
-    set(hipblas_DIR ${ROCM_PATH}/lib/cmake/hipblas)
-    set(miopen_DIR ${ROCM_PATH}/lib/cmake/miopen)
-    set(rocfft_DIR ${ROCM_PATH}/lib/cmake/rocfft)
-    set(hipfft_DIR ${ROCM_PATH}/lib/cmake/hipfft)
-    set(hipsparse_DIR ${ROCM_PATH}/lib/cmake/hipsparse)
-    set(rccl_DIR ${ROCM_PATH}/lib/cmake/rccl)
-    set(rocprim_DIR ${ROCM_PATH}/lib/cmake/rocprim)
-    set(hipcub_DIR ${ROCM_PATH}/lib/cmake/hipcub)
-    set(rocthrust_DIR ${ROCM_PATH}/lib/cmake/rocthrust)
-    set(hipsolver_DIR ${ROCM_PATH}/lib/cmake/hipsolver)
-  else()
-    set(hip_DIR ${HIP_PATH}/lib/cmake/hip)
-    set(hsa-runtime64_DIR ${ROCM_PATH}/lib/cmake/hsa-runtime64)
-    set(AMDDeviceLibs_DIR ${ROCM_PATH}/lib/cmake/AMDDeviceLibs)
-    set(amd_comgr_DIR ${ROCM_PATH}/lib/cmake/amd_comgr)
-    set(rocrand_DIR ${ROCRAND_PATH}/lib/cmake/rocrand)
-    set(hiprand_DIR ${HIPRAND_PATH}/lib/cmake/hiprand)
-    set(rocblas_DIR ${ROCBLAS_PATH}/lib/cmake/rocblas)
-    set(hipblas_DIR ${HIPBLAS_PATH}/lib/cmake/hipblas)
-    set(miopen_DIR ${MIOPEN_PATH}/lib/cmake/miopen)
-    set(rocfft_DIR ${ROCFFT_PATH}/lib/cmake/rocfft)
-    set(hipfft_DIR ${HIPFFT_PATH}/lib/cmake/hipfft)
-    set(hipsparse_DIR ${HIPSPARSE_PATH}/lib/cmake/hipsparse)
-    set(rccl_DIR ${RCCL_PATH}/lib/cmake/rccl)
-    set(rocprim_DIR ${ROCPRIM_PATH}/lib/cmake/rocprim)
-    set(hipcub_DIR ${HIPCUB_PATH}/lib/cmake/hipcub)
-    set(rocthrust_DIR ${ROCTHRUST_PATH}/lib/cmake/rocthrust)
-    set(hipsolver_DIR ${HIPSOLVER_PATH}/lib/cmake/hipsolver)
-  endif()
+  set(hip_DIR ${ROCM_PATH}/lib/cmake/hip)
+  set(hsa-runtime64_DIR ${ROCM_PATH}/lib/cmake/hsa-runtime64)
+  set(AMDDeviceLibs_DIR ${ROCM_PATH}/lib/cmake/AMDDeviceLibs)
+  set(amd_comgr_DIR ${ROCM_PATH}/lib/cmake/amd_comgr)
+  set(rocrand_DIR ${ROCM_PATH}/lib/cmake/rocrand)
+  set(hiprand_DIR ${ROCM_PATH}/lib/cmake/hiprand)
+  set(rocblas_DIR ${ROCM_PATH}/lib/cmake/rocblas)
+  set(hipblas_DIR ${ROCM_PATH}/lib/cmake/hipblas)
+  set(miopen_DIR ${ROCM_PATH}/lib/cmake/miopen)
+  set(rocfft_DIR ${ROCM_PATH}/lib/cmake/rocfft)
+  set(hipfft_DIR ${ROCM_PATH}/lib/cmake/hipfft)
+  set(hipsparse_DIR ${ROCM_PATH}/lib/cmake/hipsparse)
+  set(rccl_DIR ${ROCM_PATH}/lib/cmake/rccl)
+  set(rocprim_DIR ${ROCM_PATH}/lib/cmake/rocprim)
+  set(hipcub_DIR ${ROCM_PATH}/lib/cmake/hipcub)
+  set(rocthrust_DIR ${ROCM_PATH}/lib/cmake/rocthrust)
+  set(hipsolver_DIR ${ROCM_PATH}/lib/cmake/hipsolver)
+
 
   find_package_and_print_version(hip REQUIRED)
   find_package_and_print_version(hsa-runtime64 REQUIRED)
@@ -297,23 +168,23 @@ if(HIP_FOUND)
   find_package_and_print_version(hipsolver REQUIRED)
 
 
-  find_library(PYTORCH_HIP_LIBRARIES amdhip64 HINTS ${HIP_PATH}/lib)
+  find_library(PYTORCH_HIP_LIBRARIES amdhip64 HINTS ${ROCM_PATH}/lib)
   # TODO: miopen_LIBRARIES should return fullpath to the library file,
   # however currently it's just the lib name
   if(TARGET ${miopen_LIBRARIES})
     set(PYTORCH_MIOPEN_LIBRARIES ${miopen_LIBRARIES})
   else()
-    find_library(PYTORCH_MIOPEN_LIBRARIES ${miopen_LIBRARIES} HINTS ${MIOPEN_PATH}/lib)
+    find_library(PYTORCH_MIOPEN_LIBRARIES ${miopen_LIBRARIES} HINTS ${ROCM_PATH}/lib)
   endif()
   # TODO: rccl_LIBRARIES should return fullpath to the library file,
   # however currently it's just the lib name
   if(TARGET ${rccl_LIBRARIES})
     set(PYTORCH_RCCL_LIBRARIES ${rccl_LIBRARIES})
   else()
-    find_library(PYTORCH_RCCL_LIBRARIES ${rccl_LIBRARIES} HINTS ${RCCL_PATH}/lib)
+    find_library(PYTORCH_RCCL_LIBRARIES ${rccl_LIBRARIES} HINTS ${ROCM_PATH}/lib)
   endif()
   # hiprtc is part of HIP
-  find_library(ROCM_HIPRTC_LIB amdhip64 HINTS ${HIP_PATH}/lib)
+  find_library(ROCM_HIPRTC_LIB amdhip64 HINTS ${ROCM_PATH}/lib)
   # roctx is part of roctracer
-  find_library(ROCM_ROCTX_LIB roctx64 HINTS ${ROCTRACER_PATH}/lib)
+  find_library(ROCM_ROCTX_LIB roctx64 HINTS ${ROCM_PATH}/lib)
 endif()
diff --git a/torch/utils/hipify/cuda_to_hip_mappings.py b/torch/utils/hipify/cuda_to_hip_mappings.py
index 382cf08280e9f7a..9a7feb508a85a37 100644
--- a/torch/utils/hipify/cuda_to_hip_mappings.py
+++ b/torch/utils/hipify/cuda_to_hip_mappings.py
@@ -39,8 +39,11 @@
     pass
 
 rocm_version = (0, 0, 0)
-rocm_version_h = f"{rocm_path}/include/rocm_version.h"
-# The file could be missing due to 1) ROCm version < 5.0, or 2) no ROCm install.
+rocm_version_h = f"{rocm_path}/include/rocm-core/rocm_version.h"
+if not os.path.isfile(rocm_version_h):
+    rocm_version_h = f"{rocm_path}/include/rocm_version.h"
+
+# The file could be missing due to 1) ROCm version < 5.2, or 2) no ROCm install.
 if os.path.isfile(rocm_version_h):
     RE_MAJOR = re.compile(r"#define\s+ROCM_VERSION_MAJOR\s+(\d+)")
     RE_MINOR = re.compile(r"#define\s+ROCM_VERSION_MINOR\s+(\d+)")
@@ -628,11 +631,11 @@
         ("curand_poisson.h", ("hiprand/hiprand_kernel.h", CONV_INCLUDE, API_RAND)),
         ("curand_precalc.h", ("hiprand/hiprand_kernel.h", CONV_INCLUDE, API_RAND)),
         ("curand_uniform.h", ("hiprand/hiprand_kernel.h", CONV_INCLUDE, API_RAND)),
-        ("cusparse.h", ("hipsparse.h" if rocm_version < (5, 2, 0) else "hipsparse/hipsparse.h", CONV_INCLUDE, API_RAND)),
-        ("cufft.h", ("hipfft.h" if rocm_version < (5, 2, 0) else "hipfft/hipfft.h", CONV_INCLUDE, API_BLAS)),
-        ("cufftXt.h", ("hipfftXt.h" if rocm_version < (5, 2, 0) else "hipfft/hipfftXt.h", CONV_INCLUDE, API_BLAS)),
+        ("cusparse.h", ("hipsparse/hipsparse.h", CONV_INCLUDE, API_RAND)),
+        ("cufft.h", ("hipfft/hipfft.h", CONV_INCLUDE, API_BLAS)),
+        ("cufftXt.h", ("hipfft/hipfftXt.h", CONV_INCLUDE, API_BLAS)),
         # PyTorch also has a source file named "nccl.h", so we need to "<"">" to differentiate
-        ("<nccl.h>", ("<rccl.h>" if rocm_version < (5, 2, 0) else "<rccl/rccl.h>", CONV_INCLUDE, API_RUNTIME)),
+        ("<nccl.h>", ("<rccl/rccl.h>", CONV_INCLUDE, API_RUNTIME)),
         ("nvrtc.h", ("hip/hiprtc.h", CONV_INCLUDE, API_RTC)),
         ("thrust/system/cuda", ("thrust/system/hip", CONV_INCLUDE, API_BLAS)),
         ("cub/util_allocator.cuh", ("hipcub/hipcub.hpp", CONV_INCLUDE, API_BLAS)),
